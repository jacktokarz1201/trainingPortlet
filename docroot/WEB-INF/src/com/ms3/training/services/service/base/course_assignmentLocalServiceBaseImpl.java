/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ms3.training.services.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.ms3.training.services.model.course_assignment;
import com.ms3.training.services.service.course_assignmentLocalService;
import com.ms3.training.services.service.persistence.course_assignmentPersistence;
import com.ms3.training.services.service.persistence.coursesPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the course_assignment local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.ms3.training.services.service.impl.course_assignmentLocalServiceImpl}.
 * </p>
 *
 * @author John
 * @see com.ms3.training.services.service.impl.course_assignmentLocalServiceImpl
 * @see com.ms3.training.services.service.course_assignmentLocalServiceUtil
 * @generated
 */
public abstract class course_assignmentLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements course_assignmentLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.ms3.training.services.service.course_assignmentLocalServiceUtil} to access the course_assignment local service.
	 */

	/**
	 * Adds the course_assignment to the database. Also notifies the appropriate model listeners.
	 *
	 * @param course_assignment the course_assignment
	 * @return the course_assignment that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public course_assignment addcourse_assignment(
		course_assignment course_assignment) throws SystemException {
		course_assignment.setNew(true);

		return course_assignmentPersistence.update(course_assignment);
	}

	/**
	 * Creates a new course_assignment with the primary key. Does not add the course_assignment to the database.
	 *
	 * @param assignmentId the primary key for the new course_assignment
	 * @return the new course_assignment
	 */
	@Override
	public course_assignment createcourse_assignment(long assignmentId) {
		return course_assignmentPersistence.create(assignmentId);
	}

	/**
	 * Deletes the course_assignment with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param assignmentId the primary key of the course_assignment
	 * @return the course_assignment that was removed
	 * @throws PortalException if a course_assignment with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public course_assignment deletecourse_assignment(long assignmentId)
		throws PortalException, SystemException {
		return course_assignmentPersistence.remove(assignmentId);
	}

	/**
	 * Deletes the course_assignment from the database. Also notifies the appropriate model listeners.
	 *
	 * @param course_assignment the course_assignment
	 * @return the course_assignment that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public course_assignment deletecourse_assignment(
		course_assignment course_assignment) throws SystemException {
		return course_assignmentPersistence.remove(course_assignment);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(course_assignment.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return course_assignmentPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ms3.training.services.model.impl.course_assignmentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return course_assignmentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ms3.training.services.model.impl.course_assignmentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return course_assignmentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return course_assignmentPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return course_assignmentPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public course_assignment fetchcourse_assignment(long assignmentId)
		throws SystemException {
		return course_assignmentPersistence.fetchByPrimaryKey(assignmentId);
	}

	/**
	 * Returns the course_assignment with the primary key.
	 *
	 * @param assignmentId the primary key of the course_assignment
	 * @return the course_assignment
	 * @throws PortalException if a course_assignment with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public course_assignment getcourse_assignment(long assignmentId)
		throws PortalException, SystemException {
		return course_assignmentPersistence.findByPrimaryKey(assignmentId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return course_assignmentPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the course_assignments.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ms3.training.services.model.impl.course_assignmentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of course_assignments
	 * @param end the upper bound of the range of course_assignments (not inclusive)
	 * @return the range of course_assignments
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<course_assignment> getcourse_assignments(int start, int end)
		throws SystemException {
		return course_assignmentPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of course_assignments.
	 *
	 * @return the number of course_assignments
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getcourse_assignmentsCount() throws SystemException {
		return course_assignmentPersistence.countAll();
	}

	/**
	 * Updates the course_assignment in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param course_assignment the course_assignment
	 * @return the course_assignment that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public course_assignment updatecourse_assignment(
		course_assignment course_assignment) throws SystemException {
		return course_assignmentPersistence.update(course_assignment);
	}

	/**
	 * Returns the course_assignment local service.
	 *
	 * @return the course_assignment local service
	 */
	public com.ms3.training.services.service.course_assignmentLocalService getcourse_assignmentLocalService() {
		return course_assignmentLocalService;
	}

	/**
	 * Sets the course_assignment local service.
	 *
	 * @param course_assignmentLocalService the course_assignment local service
	 */
	public void setcourse_assignmentLocalService(
		com.ms3.training.services.service.course_assignmentLocalService course_assignmentLocalService) {
		this.course_assignmentLocalService = course_assignmentLocalService;
	}

	/**
	 * Returns the course_assignment remote service.
	 *
	 * @return the course_assignment remote service
	 */
	public com.ms3.training.services.service.course_assignmentService getcourse_assignmentService() {
		return course_assignmentService;
	}

	/**
	 * Sets the course_assignment remote service.
	 *
	 * @param course_assignmentService the course_assignment remote service
	 */
	public void setcourse_assignmentService(
		com.ms3.training.services.service.course_assignmentService course_assignmentService) {
		this.course_assignmentService = course_assignmentService;
	}

	/**
	 * Returns the course_assignment persistence.
	 *
	 * @return the course_assignment persistence
	 */
	public course_assignmentPersistence getcourse_assignmentPersistence() {
		return course_assignmentPersistence;
	}

	/**
	 * Sets the course_assignment persistence.
	 *
	 * @param course_assignmentPersistence the course_assignment persistence
	 */
	public void setcourse_assignmentPersistence(
		course_assignmentPersistence course_assignmentPersistence) {
		this.course_assignmentPersistence = course_assignmentPersistence;
	}

	/**
	 * Returns the courses local service.
	 *
	 * @return the courses local service
	 */
	public com.ms3.training.services.service.coursesLocalService getcoursesLocalService() {
		return coursesLocalService;
	}

	/**
	 * Sets the courses local service.
	 *
	 * @param coursesLocalService the courses local service
	 */
	public void setcoursesLocalService(
		com.ms3.training.services.service.coursesLocalService coursesLocalService) {
		this.coursesLocalService = coursesLocalService;
	}

	/**
	 * Returns the courses remote service.
	 *
	 * @return the courses remote service
	 */
	public com.ms3.training.services.service.coursesService getcoursesService() {
		return coursesService;
	}

	/**
	 * Sets the courses remote service.
	 *
	 * @param coursesService the courses remote service
	 */
	public void setcoursesService(
		com.ms3.training.services.service.coursesService coursesService) {
		this.coursesService = coursesService;
	}

	/**
	 * Returns the courses persistence.
	 *
	 * @return the courses persistence
	 */
	public coursesPersistence getcoursesPersistence() {
		return coursesPersistence;
	}

	/**
	 * Sets the courses persistence.
	 *
	 * @param coursesPersistence the courses persistence
	 */
	public void setcoursesPersistence(coursesPersistence coursesPersistence) {
		this.coursesPersistence = coursesPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.ms3.training.services.model.course_assignment",
			course_assignmentLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.ms3.training.services.model.course_assignment");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return course_assignment.class;
	}

	protected String getModelClassName() {
		return course_assignment.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = course_assignmentPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.ms3.training.services.service.course_assignmentLocalService.class)
	protected com.ms3.training.services.service.course_assignmentLocalService course_assignmentLocalService;
	@BeanReference(type = com.ms3.training.services.service.course_assignmentService.class)
	protected com.ms3.training.services.service.course_assignmentService course_assignmentService;
	@BeanReference(type = course_assignmentPersistence.class)
	protected course_assignmentPersistence course_assignmentPersistence;
	@BeanReference(type = com.ms3.training.services.service.coursesLocalService.class)
	protected com.ms3.training.services.service.coursesLocalService coursesLocalService;
	@BeanReference(type = com.ms3.training.services.service.coursesService.class)
	protected com.ms3.training.services.service.coursesService coursesService;
	@BeanReference(type = coursesPersistence.class)
	protected coursesPersistence coursesPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private course_assignmentLocalServiceClpInvoker _clpInvoker = new course_assignmentLocalServiceClpInvoker();
}