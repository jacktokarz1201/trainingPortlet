/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ms3.training.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.ms3.training.services.model.courses;
import com.ms3.training.services.model.coursesModel;
import com.ms3.training.services.model.coursesSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the courses service. Represents a row in the &quot;course_courses&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ms3.training.services.model.coursesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link coursesImpl}.
 * </p>
 *
 * @author John
 * @see coursesImpl
 * @see com.ms3.training.services.model.courses
 * @see com.ms3.training.services.model.coursesModel
 * @generated
 */
@JSON(strict = true)
public class coursesModelImpl extends BaseModelImpl<courses>
	implements coursesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a courses model instance should use the {@link com.ms3.training.services.model.courses} interface instead.
	 */
	public static final String TABLE_NAME = "course_courses";
	public static final Object[][] TABLE_COLUMNS = {
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "listPrice", Types.VARCHAR },
			{ "provider", Types.VARCHAR },
			{ "courseId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table course_courses (title VARCHAR(75) not null primary key,description VARCHAR(75) null,listPrice VARCHAR(75) null,provider VARCHAR(75) null,courseId LONG)";
	public static final String TABLE_SQL_DROP = "drop table course_courses";
	public static final String ORDER_BY_JPQL = " ORDER BY courses.title ASC";
	public static final String ORDER_BY_SQL = " ORDER BY course_courses.title ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ms3.training.services.model.courses"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ms3.training.services.model.courses"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ms3.training.services.model.courses"),
			true);
	public static long COURSEID_COLUMN_BITMASK = 1L;
	public static long TITLE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static courses toModel(coursesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		courses model = new coursesImpl();

		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setListPrice(soapModel.getListPrice());
		model.setProvider(soapModel.getProvider());
		model.setCourseId(soapModel.getCourseId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<courses> toModels(coursesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<courses> models = new ArrayList<courses>(soapModels.length);

		for (coursesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ms3.training.services.model.courses"));

	public coursesModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _title;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setTitle(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _title;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return courses.class;
	}

	@Override
	public String getModelClassName() {
		return courses.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("listPrice", getListPrice());
		attributes.put("provider", getProvider());
		attributes.put("courseId", getCourseId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String listPrice = (String)attributes.get("listPrice");

		if (listPrice != null) {
			setListPrice(listPrice);
		}

		String provider = (String)attributes.get("provider");

		if (provider != null) {
			setProvider(provider);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getListPrice() {
		if (_listPrice == null) {
			return StringPool.BLANK;
		}
		else {
			return _listPrice;
		}
	}

	@Override
	public void setListPrice(String listPrice) {
		_listPrice = listPrice;
	}

	@JSON
	@Override
	public String getProvider() {
		if (_provider == null) {
			return StringPool.BLANK;
		}
		else {
			return _provider;
		}
	}

	@Override
	public void setProvider(String provider) {
		_provider = provider;
	}

	@JSON
	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_columnBitmask |= COURSEID_COLUMN_BITMASK;

		if (!_setOriginalCourseId) {
			_setOriginalCourseId = true;

			_originalCourseId = _courseId;
		}

		_courseId = courseId;
	}

	public long getOriginalCourseId() {
		return _originalCourseId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public courses toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (courses)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		coursesImpl coursesImpl = new coursesImpl();

		coursesImpl.setTitle(getTitle());
		coursesImpl.setDescription(getDescription());
		coursesImpl.setListPrice(getListPrice());
		coursesImpl.setProvider(getProvider());
		coursesImpl.setCourseId(getCourseId());

		coursesImpl.resetOriginalValues();

		return coursesImpl;
	}

	@Override
	public int compareTo(courses courses) {
		String primaryKey = courses.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof courses)) {
			return false;
		}

		courses courses = (courses)obj;

		String primaryKey = courses.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		coursesModelImpl coursesModelImpl = this;

		coursesModelImpl._originalTitle = coursesModelImpl._title;

		coursesModelImpl._originalCourseId = coursesModelImpl._courseId;

		coursesModelImpl._setOriginalCourseId = false;

		coursesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<courses> toCacheModel() {
		coursesCacheModel coursesCacheModel = new coursesCacheModel();

		coursesCacheModel.title = getTitle();

		String title = coursesCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			coursesCacheModel.title = null;
		}

		coursesCacheModel.description = getDescription();

		String description = coursesCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			coursesCacheModel.description = null;
		}

		coursesCacheModel.listPrice = getListPrice();

		String listPrice = coursesCacheModel.listPrice;

		if ((listPrice != null) && (listPrice.length() == 0)) {
			coursesCacheModel.listPrice = null;
		}

		coursesCacheModel.provider = getProvider();

		String provider = coursesCacheModel.provider;

		if ((provider != null) && (provider.length() == 0)) {
			coursesCacheModel.provider = null;
		}

		coursesCacheModel.courseId = getCourseId();

		return coursesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", listPrice=");
		sb.append(getListPrice());
		sb.append(", provider=");
		sb.append(getProvider());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.ms3.training.services.model.courses");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>listPrice</column-name><column-value><![CDATA[");
		sb.append(getListPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>provider</column-name><column-value><![CDATA[");
		sb.append(getProvider());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = courses.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			courses.class
		};
	private String _title;
	private String _originalTitle;
	private String _description;
	private String _listPrice;
	private String _provider;
	private long _courseId;
	private long _originalCourseId;
	private boolean _setOriginalCourseId;
	private long _columnBitmask;
	private courses _escapedModel;
}